{
  "openapi": "3.0.1",
  "info": {
    "version": "1.0.1",
    "title": "Task Manager API",
    "description": "API documentation for Task Manager",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [{ "url": "https://task-manager-r8dz.onrender.com/api" }],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorization endpoints"
    },
    {
      "name": "User",
      "description": "User information endpoints"
    },
    {
      "name": "Avatar",
      "description": "User avatar endpoints"
    },
    {
      "name": "Theme",
      "description": "User theme endpoints"
    },
    {
      "name": "Board",
      "description": "Board endpoints"
    },
    {
      "name": "Column",
      "description": "Column endpoints"
    },
    {
      "name": "Card",
      "description": "Card endpoints"
    },
    {
      "name": "Status Filter",
      "description": "Filter endpoint"
    },
    {
      "name": "Need Help",
      "description": "Need Help endpoints"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Registration_Request"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Registration_Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "409": {
            "description": "Provided email already exists",
            "content": {}
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Login_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Login_Response"
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {}
          },
          "401": {
            "description": "Email or password is wrong",
            "content": {}
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Logout_Response"
                }
              }
            }
          },
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/users/info": {
      "get": {
        "tags": ["User"],
        "summary": "Get user information",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Get_User_Information"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/users/edit": {
      "put": {
        "tags": ["User"],
        "summary": "Update user information",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Update information object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User_Edit_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User_Edit_Response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid update information",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          },
          "404": {
            "description": "User not found",
            "content": {}
          }
        }
      }
    },
    "/users/avatar": {
      "get": {
        "tags": ["Avatar"],
        "summary": "Get user avatar",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Get_User_Avatar"
                }
              }
            }
          },
          "404": {
            "description": "User or avatar not found",
            "content": {}
          }
        }
      }
    },
    "/users/edit-avatar": {
      "put": {
        "tags": ["Avatar"],
        "summary": "Update user avatar",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Avatar upload object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/Edit_Avatar"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Get_User_Avatar"
                }
              }
            }
          },
          "400": {
            "description": "No file uploaded",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/users/theme": {
      "patch": {
        "tags": ["Theme"],
        "summary": "Update user theme",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Theme update object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Theme_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Theme_Response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid theme data",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/getBoard/{id}": {
      "get": {
        "tags": ["Board"],
        "summary": "Get a board by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the board to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            }
          },
          "404": {
            "description": "Board not found",
            "content": {}
          }
        }
      }
    },
    "/getBoards": {
      "get": {
        "tags": ["Board"],
        "summary": "Get all boards",
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Board"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Boards not found",
            "content": {}
          }
        }
      }
    },
    "/board": {
      "post": {
        "tags": ["Board"],
        "summary": "Create a new board",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Board creation object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New_Board"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            }
          },
          "400": {
            "description": "Invalid board data",
            "content": {}
          }
        }
      }
    },
    "/editBoard/{id}": {
      "put": {
        "tags": ["Board"],
        "summary": "Update a board by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the board to update"
          }
        ],
        "requestBody": {
          "description": "Board update object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Edit_Board"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Board"
                }
              }
            }
          },
          "400": {
            "description": "Invalid board data",
            "content": {}
          },
          "404": {
            "description": "Board not found",
            "content": {}
          }
        }
      }
    },
    "/deleteBoard/{id}": {
      "delete": {
        "tags": ["Board"],
        "summary": "Delete a board by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the board to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "404": {
            "description": "Board not found",
            "content": {}
          }
        }
      }
    },
    "/getColumn/{id}": {
      "get": {
        "tags": ["Column"],
        "summary": "Get a column by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the column to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          },
          "404": {
            "description": "Column not found",
            "content": {}
          }
        }
      }
    },
    "/getColumns": {
      "get": {
        "tags": ["Column"],
        "summary": "Get all columns",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "boardId": "string",
            "description": "ID of the board from what need to get columns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Column"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Columns not found",
            "content": {}
          }
        }
      }
    },
    "/board/{boardId}/column": {
      "post": {
        "tags": ["Column"],
        "summary": "Create a new column",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "boardId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the board to add the column to"
          }
        ],
        "requestBody": {
          "description": "Column creation object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New_Column"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          },
          "400": {
            "description": "Invalid column data",
            "content": {}
          },
          "404": {
            "description": "Board not found",
            "content": {}
          }
        }
      }
    },
    "/editColumn/{id}": {
      "put": {
        "tags": ["Column"],
        "summary": "Update a column by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the column to update"
          }
        ],
        "requestBody": {
          "description": "Column update object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Edit_Column"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Column"
                }
              }
            }
          },
          "400": {
            "description": "Invalid column data",
            "content": {}
          },
          "404": {
            "description": "Column not found",
            "content": {}
          }
        }
      }
    },
    "/deleteColumn/{id}": {
      "delete": {
        "tags": ["Column"],
        "summary": "Delete a column by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the column to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "404": {
            "description": "Column not found",
            "content": {}
          }
        }
      }
    },

    "/getCard/{id}": {
      "get": {
        "tags": ["Card"],
        "summary": "Get a card by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the card to get"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "404": {
            "description": "Card not found",
            "content": {}
          }
        }
      }
    },
    "/getCards": {
      "get": {
        "tags": ["Card"],
        "summary": "Get all cards",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the column from what need to get columns"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cards not found",
            "content": {}
          }
        }
      }
    },
    "/column/{columnId}/card": {
      "post": {
        "tags": ["Card"],
        "summary": "Create a new card",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "columnId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the column to add the card to"
          }
        ],
        "requestBody": {
          "description": "Card creation object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/New_Card"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "400": {
            "description": "Invalid card data",
            "content": {}
          },
          "404": {
            "description": "Column not found",
            "content": {}
          }
        }
      }
    },
    "/editCard/{id}": {
      "put": {
        "tags": ["Card"],
        "summary": "Update a card by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the card to update"
          }
        ],
        "requestBody": {
          "description": "Card update object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Edit_Card"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Card"
                }
              }
            }
          },
          "400": {
            "description": "Invalid card data",
            "content": {}
          },
          "404": {
            "description": "Card not found",
            "content": {}
          }
        }
      }
    },
    "/deleteCard/{id}": {
      "delete": {
        "tags": ["Card"],
        "summary": "Delete a card by ID",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the card to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Successful operation",
            "content": {}
          },
          "404": {
            "description": "Card not found",
            "content": {}
          }
        }
      }
    },

    "/cards/filter/priority/{priority}": {
      "get": {
        "tags": ["Status Filter"],
        "summary": "Filter cards by priority",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "priority",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "Priority level to filter by"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Card"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Cards not found",
            "content": {}
          }
        }
      }
    },
    "/need-help": {
      "post": {
        "tags": ["Need Help"],
        "summary": "Send a help request",
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Help request object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Need_Help_Request"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Need_Help_Response"
                }
              }
            }
          },
          "400": {
            "description": "Invalid help request",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Registration_Request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "123456"
          }
        },
        "required": ["name", "email", "password"]
      },
      "Registration_Response": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "123456lsdvldvl21313213"
          },
          "token": {
            "type": "string",
            "example": "bkjk232323-wv22r23rvsd-2r2k2k3"
          },
          "theme": {
            "type": "string",
            "enum": ["dark", "light", "violet"]
          },
          "photo": {
            "type": "string",
            "example": "https://test-photo.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Login_Request": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "minLength": 6,
            "example": "123456"
          }
        },
        "required": ["email", "password"]
      },
      "Login_Response": {
        "type": "object",
        "properties": {
           "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "123456lsdvldvl21313213"
          },
          "token": {
            "type": "string",
            "example": "bkjk232323-wv22r23rvsd-2r2k2k3"
          },
          "theme": {
            "type": "string",
            "enum": ["dark", "light", "violet"]
          },
          "photo": {
            "type": "string",
            "example": "https://test-photo.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Logout_Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Get_User_Information": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "format": "email"
          }
        }
      },
      "User_Edit_Request": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "123456"
          }
        }
      },
      "User_Edit_Response": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "example": "Alex"
          },
          "email": {
            "type": "string",
            "format": "email"
          },
          "password": {
            "type": "string",
            "example": "123456lsdvldvl21313213"
          },
          "token": {
            "type": "string",
            "example": "bkjk232323-wv22r23rvsd-2r2k2k3"
          },
          "theme": {
            "type": "string",
            "enum": ["dark", "light", "violet"]
          },
          "photo": {
            "type": "string",
            "example": "https://test-photo.com"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Avatar_Request": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string"
          }
        },
        "required": ["avatar"]
      },
      "Avatar_Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Theme_Request": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
            "enum": ["light", "dark", "violet"]
          }
        },
        "required": ["theme"]
      },
      "Theme_Response": {
        "type": "object",
        "properties": {
          "theme": {
            "type": "string",
             "enum": ["light", "dark", "violet"]
          }
        }
      },
      "Need_Help_Request": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email"
          },
          "message": {
            "type": "string"
          }
        },
        "required": ["email", "message"]
      },
      "Need_Help_Response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "Board": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "background": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "columns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Column"
            }
          }
        }
      },
      "New_Board": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "background": {
            "type": "string"
          }
        },
        "required": ["title", "icon", "background"]
      },
      "Edit_Board": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "icon": {
            "type": "string"
          },
          "background": {
            "type": "string"
          }
        }
      },
      "Column": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "owner": {
            "type": "string"
          },
          "cards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Card"
            }
          }
        }
      },
      "New_Column": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          }
        },
        "required": ["title"]
      },
      "Edit_Column": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          }
        }
      },
      "Card": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "New_Card": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "required": ["title", "description"]
      },
      "Edit_Card": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "priority": {
            "type": "string"
          },
          "deadline": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Get_User_Avatar": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "example": "https://test-photo.com"
          }
        }
      },
      "Edit_Avatar": {
        "type": "object",
        "properties": {
          "avatar": {
            "type": "string",
            "format": "binary"
          }
        },
        "required": ["avatar"]
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
